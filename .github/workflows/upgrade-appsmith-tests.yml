name: Upgrade Appsmith Test Workflow

on:
  workflow_dispatch:
    inputs:
      pr:
        description: "This is the PR number in case the workflow is being called in a pull request"
        required: false
        type: number

jobs:
  pr-cost:
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: calculate ci usage cost for pr-cost
        if: always()
        uses: actions/github-script@v6
        env:
          owner: ${{}}
          pr: ${{inputs.pr}}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            async function getWorkflowRuns(prNumber) {
              let runIds = [];
              let page = 1;
              let done = false;

              while (!done) {
                  try {
                      const res = await github.rest.issues.listComments({
                          ...context.repo,
                          issue_number: prNumber,
                          per_page: 100,
                          page: page,
                      });

                      if (res.data.length === 0) {
                          done = true;
                      } else {
                          res.data.forEach((comment) => {
                              if (comment.body?.includes("actions/runs")) {
                                  runIds.push(Number(comment.body.match(/\/actions\/runs\/(\d+)/)[1]));
                              }
                          });
                      }
                      if (res.data.length < 100) {
                          done = true;
                      } else {
                          page++;
                      }
                  } catch (err) {
                      console.log(err);
                      done = true;
                  }
              }
              return [...new Set(runIds)];
            }

            async function getBillableTimeForPr(prNumber) {
                try {
                    const runIds = await getWorkflowRuns(prNumber);

                    const billableTimePromises = runIds.map(async (run_id) => {
                        const usageRes = await github.rest.actions.getWorkflowRunUsage({
                            ...context.repo,
                            run_id: run_id,
                        });
                        const billableData = usageRes.data.billable;
                        return billableData;
                    });
                    const billableTimes = await Promise.all(billableTimePromises);
                    const totalBillableTime = {};
                    billableTimes.forEach((billableData) => {
                        Object.keys(billableData).forEach((key) => {
                            if (totalBillableTime.hasOwnProperty(key)) {
                                totalBillableTime[key] += billableData[key].total_ms;
                            } else {
                                totalBillableTime[key] = billableData[key].total_ms;
                            }
                        });
                    });

                    return totalBillableTime;
                } catch (error) {
                    console.error("Error:", error);
                }
            }

            async function getPrCost() {
                const pr = process.env.pr;
                const totalCost = { TOTAL: 0 };

                const promises = prs.map(async (pr) => {
                    return getBillableTimeForPr(pr).then((bill) => {
                        const cost = { UBUNTU: 0.008, UBUNTU_8_CORE: 0.032, UBUNTU_4_CORE: 0.016 };

                        for (const key of Object.keys(bill)) {
                            totalCost[key] = Math.ceil(bill[key] / 60000) * cost[key];
                            totalCost["TOTAL"] += totalCost[key];
                        }
                    });
                });
                try {
                    await Promise.all(promises);
                    github.rest.issues.createComment({
                      ...context.repo,
                      issue_number: pr,
                      body: totalCost
                    })
                } catch (error) {
                    console.error("Error:", error);
                }
            }