package com.external.plugins;

import com.appsmith.external.dtos.ExecuteActionDTO;
import com.appsmith.external.exceptions.pluginExceptions.AppsmithPluginError;
import com.appsmith.external.exceptions.pluginExceptions.AppsmithPluginException;
import com.appsmith.external.helpers.restApiUtils.connections.APIConnection;
import com.appsmith.external.helpers.restApiUtils.helpers.RequestCaptureFilter;
import com.appsmith.external.models.ActionConfiguration;
import com.appsmith.external.models.ActionExecutionRequest;
import com.appsmith.external.models.ActionExecutionResult;
import com.appsmith.external.models.BearerTokenAuth;
import com.appsmith.external.models.DatasourceConfiguration;
import com.appsmith.external.models.Property;
import com.appsmith.external.models.TriggerRequestDTO;
import com.appsmith.external.models.TriggerResultDTO;
import com.appsmith.external.plugins.BasePlugin;
import com.appsmith.external.plugins.BaseRestApiPluginExecutor;
import com.appsmith.external.services.SharedConfig;
import lombok.extern.slf4j.Slf4j;
import org.pf4j.PluginWrapper;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.ExchangeStrategies;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

@Slf4j
public class OpenAiPlugin extends BasePlugin {

    public OpenAiPlugin(PluginWrapper wrapper) {
        super(wrapper);
    }

    public static class OpenAiPluginExecutor extends BaseRestApiPluginExecutor {

        public static final ExchangeStrategies EXCHANGE_STRATEGIES = ExchangeStrategies.builder()
                .codecs(configurer -> configurer.defaultCodecs().maxInMemorySize(/* 10MB */ 10 * 1024 * 1024))
                .build();

        private static final String OPEN_AI_HOST = "https://api.openai.com";
        private static final String MODELS_ENDPOINT = "/v1/models";

        private static OpenAiPluginExecutor instance;

        public OpenAiPluginExecutor(SharedConfig config) {
            super(config);
        }

        public static OpenAiPluginExecutor getInstance(SharedConfig sharedConfig) {
            if (instance == null) {
                instance = new OpenAiPluginExecutor(sharedConfig);
            }
            return instance;
        }

        @Override
        public Mono<ActionExecutionResult> executeParameterized(
                APIConnection connection,
                ExecuteActionDTO executeActionDTO,
                DatasourceConfiguration datasourceConfiguration,
                ActionConfiguration actionConfiguration) {
            prepareConfigurationsForExecution(executeActionDTO, actionConfiguration, datasourceConfiguration);

            // Get prompt from action configuration
            final List<Property> properties = actionConfiguration.getPluginSpecifiedTemplates();
            List<Map.Entry<String, String>> parameters = new ArrayList<>();

            prepareConfigurationsForExecution(executeActionDTO, actionConfiguration, datasourceConfiguration);
            // Filter out any empty headers
            headerUtils.removeEmptyHeaders(actionConfiguration);
            headerUtils.setHeaderFromAutoGeneratedHeaders(actionConfiguration);

            return this.executeCommon(connection, datasourceConfiguration, actionConfiguration, parameters);
        }

        public Mono<ActionExecutionResult> executeCommon(
                APIConnection apiConnection,
                DatasourceConfiguration datasourceConfiguration,
                ActionConfiguration actionConfiguration,
                List<Map.Entry<String, String>> insertedParams) {

            // Initializing object for error condition
            ActionExecutionResult errorResult = new ActionExecutionResult();
            initUtils.initializeResponseWithError(errorResult);

            // Set of hint messages that can be returned to the user.
            Set<String> hintMessages = new HashSet<>();

            // Initializing request URL
            String url = initUtils.initializeRequestUrl(actionConfiguration, datasourceConfiguration);
            boolean encodeParamsToggle = headerUtils.isEncodeParamsToggleEnabled(actionConfiguration);

            URI uri;
            try {
                uri = uriUtils.createUriWithQueryParams(
                        actionConfiguration, datasourceConfiguration, url, encodeParamsToggle);
            } catch (Exception e) {
                ActionExecutionRequest actionExecutionRequest = RequestCaptureFilter.populateRequestFields(
                        actionConfiguration, null, insertedParams, objectMapper);
                actionExecutionRequest.setUrl(url);
                errorResult.setErrorInfo(
                        new AppsmithPluginException(AppsmithPluginError.PLUGIN_EXECUTE_ARGUMENT_ERROR, e.getMessage()));
                errorResult.setRequest(actionExecutionRequest);
                return Mono.just(errorResult);
            }

            ActionExecutionRequest actionExecutionRequest =
                    RequestCaptureFilter.populateRequestFields(actionConfiguration, uri, insertedParams, objectMapper);

            WebClient.Builder webClientBuilder =
                    restAPIActivateUtils.getWebClientBuilder(actionConfiguration, datasourceConfiguration);
            String reqContentType = headerUtils.getRequestContentType(actionConfiguration, datasourceConfiguration);

            /* Check for content type */
            final String contentTypeError = headerUtils.verifyContentType(actionConfiguration.getHeaders());
            if (contentTypeError != null) {
                errorResult.setErrorInfo(
                        new AppsmithPluginException(AppsmithPluginError.PLUGIN_EXECUTE_ARGUMENT_ERROR));
                errorResult.setRequest(actionExecutionRequest);
                return Mono.just(errorResult);
            }

            HttpMethod httpMethod = actionConfiguration.getHttpMethod();
            if (httpMethod == null) {
                errorResult.setErrorInfo(
                        new AppsmithPluginException(AppsmithPluginError.PLUGIN_EXECUTE_ARGUMENT_ERROR));
                errorResult.setRequest(actionExecutionRequest);
                return Mono.just(errorResult);
            }

            final RequestCaptureFilter requestCaptureFilter = new RequestCaptureFilter(objectMapper);
            Object requestBodyObj =
                    dataUtils.getRequestBodyObject(actionConfiguration, reqContentType, encodeParamsToggle, httpMethod);
            WebClient client = restAPIActivateUtils.getWebClient(
                    webClientBuilder, apiConnection, reqContentType, EXCHANGE_STRATEGIES, requestCaptureFilter);

            /* Triggering the actual REST API call */
            return restAPIActivateUtils
                    .triggerApiCall(
                            client,
                            httpMethod,
                            uri,
                            requestBodyObj,
                            actionExecutionRequest,
                            objectMapper,
                            hintMessages,
                            errorResult,
                            requestCaptureFilter)
                    .onErrorResume(error -> {
                        boolean isBodySentWithApiRequest = requestBodyObj == null ? false : true;
                        errorResult.setRequest(requestCaptureFilter.populateRequestFields(
                                actionExecutionRequest, isBodySentWithApiRequest));
                        errorResult.setIsExecutionSuccess(false);
                        log.debug(
                                "An error has occurred while trying to run the API query for url: {}, path : {}",
                                datasourceConfiguration.getUrl(),
                                actionConfiguration.getPath());
                        error.printStackTrace();
                        if (!(error instanceof AppsmithPluginException)) {
                            error = error;
                        }
                        errorResult.setErrorInfo(error);
                        return Mono.just(errorResult);
                    });
        }

        @Override
        public Set<String> validateDatasource(DatasourceConfiguration datasourceConfiguration) {
            return datasourceUtils.validateDatasource(datasourceConfiguration, false);
        }

        @Override
        public Mono<TriggerResultDTO> trigger(
                APIConnection connection, DatasourceConfiguration datasourceConfiguration, TriggerRequestDTO request) {

            // Initializing webClient to be used for http call
            WebClient.Builder webClientBuilder = WebClient.builder();

            WebClient client =
                    webClientBuilder.exchangeStrategies(EXCHANGE_STRATEGIES).build();

            // Authentication will already be valid at this point
            final BearerTokenAuth bearerTokenAuth = (BearerTokenAuth) datasourceConfiguration.getAuthentication();
            assert (bearerTokenAuth.getAuthenticationResponse() != null);
            URI uri;
            try {
                uri = new URI(OPEN_AI_HOST + MODELS_ENDPOINT);
            } catch (Exception e) {
                uri = URI.create(OPEN_AI_HOST + MODELS_ENDPOINT);
            }

            return client.method(HttpMethod.GET)
                    .uri(uri)
                    .body(BodyInserters.empty())
                    .headers(headers -> headers.set("Authorization", "Bearer " + bearerTokenAuth.getBearerToken()))
                    .exchangeToMono(clientResponse -> {
                        if (clientResponse.statusCode().is2xxSuccessful()) {
                            return clientResponse.bodyToMono(new ParameterizedTypeReference<Map<String, Object>>() {});
                        } else {
                            return clientResponse.createError();
                        }
                    })
                    .map(data -> {
                        Map<String, String> modelList = new HashMap<>();
                        if (!data.containsKey("data")) {
                            return new TriggerResultDTO(modelList);
                        }

                        List<Object> models = (List<Object>) data.get("data");
                        for (Object model : models) {

                            Map<String, Object> modelMap = (Map<String, Object>) model;

                            if (!modelMap.containsKey("id")) {
                                continue;
                            }

                            String modelId = (String) modelMap.get("id");

                            modelList.put(modelId, modelId);
                        }
                        return new TriggerResultDTO(modelList);
                    });
        }
    }
}
